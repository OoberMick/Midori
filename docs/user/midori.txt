.. |(version)| replace:: 0.2.2

'''''''
 Midori
'''''''

-----------------------------------------
 A lightweight, portable GTK+ web browser
-----------------------------------------

:Authors: Christian Dywan
:Date: $Date: 2009-11-18 18:20:11 +0100 (Wed, 18 Nov 2009) $
:Version: |(version)|

Copyright © 2008-2009

This documentation is distributed under the terms of the
`GNU Lesser General Public License`_; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.


.. contents::



Introduction
''''''''''''


What is Midori
--------------

Midori is a lightweight and portable web browser based on Gtk+. The
interface is designed to be intuitive yet powerful.

* Full integration with GTK+2.
* Fast rendering with WebKit.
* Tabs, windows and session management.
* Flexibly configurable Web Search.
* User scripts and user styles support.
* Straightforward bookmark management.
* Customizable and extensible interface.
* Extensions written in C.


Running Midori
--------------


* If you are using a graphical desktop environment you will usually find
  Midori in the menu under Network.

* You can also run Midori from a console or a Run dialog.
  See also `Command line usage`.

  $ midori

A browser window appears where you can start navigating the web right away.


The main interface
--------------------------


The main browser window consists of a few basic elements:


* The menubar. It's pretty much standardized and gives you access to
  allmost all features, many of the items have a keyboard shortcut by default.
  See also `Keyboard shortcuts`_.

* The navigationbar. It lets you open tabs, go back and forward, enter
  addresses, search the web and reopen closed tabs.
  See also `The navigationbar`.

* The sidepanel. It takes a pretty central role in the functionality it provides,
  yet it can be hidden and resized to not distract you.
  See also `The sidepanel`.

* The statusbar. It displays informational text when hovering something
  with a pointer. That's it.


Taking a closer look
''''''''''''''''''''


Command line usage
------------------


Running Midori normally works as follows:


* $ midori

  Just run a new instance of Midori. If an instance of Midori is already
  running a new window in that instance will be opened.

* $ midori [URIs]

  You can supply any number of URIs to open as arguments. If you have a
  saved session or a running instance they will be added to the last
  active window.

* $ midori [URI1]|[URI2]|...

  You can separate URIS by a pipe (|) as well. They are handled as if you
  provided all URIs as separate arguments.

* $ midori --run [JAVASCRIPT]

  If you pass the filename of a javascript Midori will attempt to run
  the contents of the file as javascript code.


Note that support for opening tabs in an existing instance depends on
your build and may not be available on some platforms.


The following arguments are supported if you call Midori from a command line.


+-------+--------------------+------------------------------------------------+
| Short | Long option        | Function                                       |
+=======+====================+================================================+
| -a    | --app              | Run ADDRESS as a web application               |
+-------+--------------------+------------------------------------------------+
| -c    | --config           | Use FOLDER as configuration folder             |
+-------+--------------------+------------------------------------------------+
| -r    | --run              | Run the specified filename as javascript       |
+-------+--------------------+------------------------------------------------+
| -s    | --snapshot         + Take a snapshot of the specified URI           |
+-------+--------------------+------------------------------------------------+
| -V    | --version          |  Show version information and exit.            |
+-------+--------------------+------------------------------------------------+


Configuration files
-------------------


The configuration files in Midori that save related states are by default
stored in the folder ~/.config/midori in the home directory. It is possible
to use a different folder by specifying '--config' on the command line.

The files stored in the primary configuration folder are the following:

+----------------+------------------------------------------------------------+
| Filename       | Contents                                                   |
+================+============================================================+
| accels         | Keyboard shortcuts, GtkAccelMap resource                   |
+----------------+------------------------------------------------------------+
| bookmarks.xbel | Bookmarks, XBEL                                            |
+----------------+------------------------------------------------------------+
| config         | Preferences, text key file                                 |
+----------------+------------------------------------------------------------+
| cookies.txt    | Cookies, Mozilla text cookies                              |
+----------------+------------------------------------------------------------+
| history.db     | History, sqlite3                                           |
+----------------+------------------------------------------------------------+
| logins         | Usernames and passwords, plain text                        |
+----------------+------------------------------------------------------------+
| running        | A file created to track whether Midori quit cleanly        |
+----------------+------------------------------------------------------------+
| search         | Search engines, text key file                              |
+----------------+------------------------------------------------------------+
| session.xbel   | The current or last session, ie. open tabs,                |
+----------------+------------------------------------------------------------+
| tabtrash.xbel  | The 10 last closed tabs                                    |
+----------------+------------------------------------------------------------+

Note that generally manual modifications to these files aren't recommended. As
an exception, while Midori is *not* running, it is possible to edit or
replace the 'bookmarks.xbel' as long as it is valid XBEL/ XML.

Currently while Midori is running it will happily overwrite files as needed and
never read back any changes.


Keyboard shortcuts
------------------


...


The navigationbar
-----------------


The navigationbar is the primary toolbar containing notably back and forward
buttons, the location entry and a search entry. The "Toolbar Editor" extension
can be used to add or remove items.


The sidepanel
-------------


...


Extensions
----------


...


Frequently asked questions
''''''''''''''''''''''''''


How do you pronounce Midori and what does it mean anyway?
---------------------------------------------------------

Pronounce it "midoɺi", with a Bavarian/ Japanese "r" or "Mee-Doh-Ree"
in English or read it Italian. The name comes from the Japanese word
緑 (みどり) for the colour "green".


What does the logo mean?
------------------------

The paw of a green cat. Obviously. Also it resembles the letter "M"
in "Midori". The curving is supposed to emphasize speed.


On which platforms does Midori run currently?
---------------------------------------------

Midori is basically very portable and should run on all platforms that
its dependencies support.



Under which license is Midori distributed?
------------------------------------------

Midori, documentation and all delivered artwork are licensed under the LGPL2.


GNU Lesser General Public License
'''''''''''''''''''''''''''''''''

::

    GNU LESSER GENERAL PUBLIC LICENSE
    Version 2.1, February 1999

    FIXME: Provide full license text

